akka{
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
}
my-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

my-blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}

//配置邮箱的方式一，通过调度器配置邮箱
prio-dispatcher {
  mailbox-type = "prac7.PrinterPrioMailBox"
  //Other dispatcher configuration goes here
}


//配置邮箱的方式二，通过Actor的名字配置邮箱
akka.actor.deployment {
  /priomailboxactor {
    mailbox = prio-mailbox
  }
}
prio-mailbox {
  mailbox-type = "prac7.PrinterPrioMailBox"
  //Other mailbox configuration goes here
}

//配置控制消息优先的邮箱
control-aware-dispatcher {
  mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  //Other dispatcher configuration goes here
}

//配置路由
akka.actor.deployment {
  /master {
    router = round-robin-pool //轮询
//    router = random-pool //随机
    //router = smallest-mailbox-pool //空闲 选择邮箱中邮件最少的Actor 远程Actor的优先级最低，因为不知道远程Actor的邮箱中有多少邮件
    //router = router = broadcast-pool //广播
    nr-of-instances = 5
  }
  //通过Pool配置分散收集策略
  /master1 {
    router = scatter-gather-pool //分散消息收集结果 将收到的消息发送给所有的Routee，并等待第一个回复，其他消息将被丢弃
    nr-of-instances = 5
    within = 10 seconds
  }
  //通过Pool配置TailChoppingPool
  /master1-1 {
    //TailChoppingRouter首先将消息发送给一个随机挑选的routee，然后在一小段延迟之后发送给第二个routee（从剩下的路由中随机挑选）
    // 等等。它等待第一个回复它回来并转发回原始发件人。其他答复被丢弃。
    //该路由器的目标是通过对多个路由执行冗余查询来减少延迟，假定其他参与者之一可能比初始响应更快。
    router = tail-chopping-pool
    nr-of-instances = 5
    within = 10 seconds
    tail-chopping-router.interval = 20 milliseconds
  }
  //使用Group来配置路由
  /master2 {
    router = round-robin-group //轮询
    //router = random-group //随机
    //router = broadcast-group //广播
    routees.paths = ["/user/w1", "/user/w2", "/user/w3"]
  }
  //使用Group配置scatter-gather路由策略
  /master2-1 {
    router = scatter-gather-group
    routees.paths = ["/user/w1", "/user/w2", "/user/w3"]
    within = 10 seconds
  }
  //使用Group配置TailChoppingGroup路由策略
  /master2-2 {
    router = tail-chopping-group
    routees.paths = ["/user/workers/w1", "/user/workers/w2", "/user/workers/w3"]
    within = 10 seconds
    tail-chopping-router.interval = 20 milliseconds
  }

  //配置路由 balancingPool
  /master3 {
    router = balancing-pool //平衡Pool routee共用一个邮箱，繁忙routee的工作会尝试重新分配给空闲routee
    nr-of-instances = 5
    pool-dispatcher {
      executor = "thread-pool-executor"
      # 给这个线程池分配3个线程
      thread-pool-executor {
        core-pool-size-min = 3
        core-pool-size-max = 3
      }
      //当默认的无限容量邮箱不适用时，比如需要使用优先级邮箱，还可以配置邮箱
//      mailbox = myapp.myprioritymailbox
    }
  }

  //给Router配置可以自动调整大小的Pool
  /master4 {
    router = round-robin-pool
    resizer {
      lower-bound = 2
      upper-bound = 15
      messages-per-resize = 100
    }
  }

  //给Router配置
  /master5 {
    router = round-robin-pool
    optimal-size-exploring-resizer {
      enabled = on
      action-interval = 5s
      downsize-after-underutilized-for = 72h
    }
  }

  //内联定义调度器
  /poolWithDispatcher {
    router = random-pool
    nr-of-instances = 5
    pool-dispatcher {
      fork-join-executor.parallelism-min = 5
      fork-join-executor.parallelism-max = 5
    }
  }
}

akka.persistence.journal.plugin = "akka.persistence.journal.inmem"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
